<?php

namespace {{namespace}};

use {{app_namespace}}\Http\Fields\{{class}}Fields;
use {{app_namespace}}\Models\{{class}};
use {{app_namespace}}\View;
use TypeRocket\Controllers\Controller;
use TypeRocket\Http\Response;
use TypeRocket\Models\AuthUser;

class {{class}}Controller extends Controller
{
    /**
     * Index page
     */
    public function index()
    {
        return View::new('{{view_path}}.index');
    }

    /**
     * Add page
     */
    public function add(AuthUser $user)
    {
        $form = tr_form({{class}}::class)->useErrors()->useOld()->useConfirm();
        return View::new('{{view_path}}.form', compact('form', 'user'));
    }

    /**
     * Create item
     */
    public function create({{class}}Fields $fields, {{class}} ${{variable}}, Response $response, AuthUser $user)
    {
        if (!${{variable}}->can('create')) {
            $response->unauthorized('Unauthorized: {{class}} not created')->abort();
        }

        ${{variable}}->created_by = $user->ID;
        ${{variable}}->updated_by = $user->ID;

        $success = tryDatabaseOperation(
            fn() => ${{variable}}->save($fields),
            $response,
            '{{class}} created successfully',
            $fields
        );

        if ($success) {
            return tr_redirect()->toPage('{{route_name}}', 'index')->withFlash('{{class}} created');
        } else {
            return tr_redirect()->back()->withErrors($response->getErrors());
        }
    }

    /**
     * Edit page
     */
    public function edit({{class}} ${{variable}}, AuthUser $user)
    {
        $form = tr_form(${{variable}})->useErrors()->useOld()->useConfirm();
        return View::new('{{view_path}}.form', compact('form', 'user'));
    }

    /**
     * Update item
     */
    public function update({{class}} ${{variable}}, {{class}}Fields $fields, Response $response, AuthUser $user)
    {
        if (!${{variable}}->can('update')) {
            $response->unauthorized('Unauthorized: {{class}} not updated')->abort();
        }

        ${{variable}}->updated_by = $user->ID;

        $success = tryDatabaseOperation(
            fn() => ${{variable}}->save($fields),
            $response,
            '{{class}} updated successfully',
            $fields
        );

        if ($success) {
            return tr_redirect()->toPage('{{route_name}}', 'edit', ${{variable}}->getID())->withFlash('{{class}} updated');
        } else {
            return tr_redirect()->back()->withErrors($response->getErrors());
        }
    }

    /**
     * Delete item
     */
    public function destroy({{class}} ${{variable}}, Response $response)
    {
        if (!${{variable}}->can('destroy')) {
            return $response->unauthorized('Unauthorized: {{class}} not deleted');
        }

        $deleted = ${{variable}}->delete();

        if ($deleted === false) {
            return $response->error('Delete failed due to a database error.')->setStatus(500);
        }

        return $response->success('{{class}} deleted.')->setData('{{variable}}', ${{variable}});
    }
}