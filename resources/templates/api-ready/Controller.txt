<?php

namespace {{namespace}};

use {{app_namespace}}\Http\Fields\{{class}}Fields;
use {{app_namespace}}\Models\{{class}};
use {{app_namespace}}\View;
use TypeRocket\Controllers\Controller;
use TypeRocket\Http\Response;
use TypeRocket\Models\AuthUser;

class {{class}}Controller extends Controller
{
    /**
     * The index page for admin
     *
     * @return mixed
     */
    public function index()
    {
        return View::new('{{view_path}}.index');
    }

    /**
     * The add page for admin
     *
     * @return mixed
     */
    public function add(AuthUser $user)
    {
        $form = tr_form({{class}}::class)->useErrors()->useOld()->useConfirm();
        return View::new('{{view_path}}.form', compact('form', 'user'));
    }

    /**
     * Create item
     *
     * AJAX requests and normal requests can be made to this action
     *
     * @return mixed
     */
    public function create({{class}}Fields $fields, {{class}} ${{variable}}, Response $response, AuthUser $user)
    {
        if (!${{variable}}->can('create')) {
            $response->unauthorized('Unauthorized: {{class}} not created')->abort();
        }

        ${{variable}}->created_by = $user->ID;
        ${{variable}}->updated_by = $user->ID;

        $success = tryDatabaseOperation(
            fn() => ${{variable}}->save($fields),
            $response,
            '{{class}} created successfully',
            $fields
        );

        if ($success) {
            return tr_redirect()->toPage('{{route_name}}', 'index')->withFlash('{{class}} created');
        } else {
            return tr_redirect()->back()
                ->withErrors($response->getErrors());
        }
    }

    /**
     * The edit page for admin
     *
     * @param {{class}} ${{variable}}
     *
     * @return mixed
     */
    public function edit({{class}} ${{variable}}, AuthUser $user)
    {
        $current_id = ${{variable}}->getID();
        $createdBy = ${{variable}}->createdBy;
        $updatedBy = ${{variable}}->updatedBy;

        $form = tr_form(${{variable}})->useErrors()->useOld()->useConfirm();
        return View::new('{{view_path}}.form', compact('form', 'current_id', 'createdBy', 'updatedBy', 'user'));
    }

    /**
     * Update item
     *
     * AJAX requests and normal requests can be made to this action
     *
     * @param {{class}} ${{variable}}
     *
     * @return mixed
     */
    public function update({{class}} ${{variable}}, {{class}}Fields $fields, Response $response, AuthUser $user)
    {
        if (!${{variable}}->can('update')) {
            $response->unauthorized('Unauthorized: {{class}} not updated')->abort();
        }

        ${{variable}}->updated_by = $user->ID;

        $success = tryDatabaseOperation(
            fn() => ${{variable}}->save($fields),
            $response,
            '{{class}} updated successfully',
            $fields
        );

        if ($success) {
            return tr_redirect()->toPage('{{route_name}}', 'edit', ${{variable}}->getID())->withFlash('{{class}} updated');
        } else {
            return tr_redirect()->back()
                ->withErrors($response->getErrors());
        }
    }

    /**
     * The show page for admin
     *
     * @param {{class}} ${{variable}}
     *
     * @return mixed
     */
    public function show({{class}} ${{variable}})
    {
        return ${{variable}};
    }

    /**
     * The delete page for admin
     *
     * @param {{class}} ${{variable}}
     *
     * @return mixed
     */
    public function delete({{class}} ${{variable}})
    {
        //
    }

    /**
     * Destroy item
     *
     * AJAX requests and normal requests can be made to this action
     *
     * @param {{class}} ${{variable}}
     *
     * @return mixed
     */
    public function destroy({{class}} ${{variable}}, Response $response)
    {
        if (!${{variable}}->can('destroy')) {
            return $response->unauthorized('Unauthorized: {{class}} not deleted');
        }

        $deleted = ${{variable}}->delete();

        if ($deleted === false) {
            return $response
                ->error('Delete failed due to a database error.')
                ->setStatus(500);
        }

        return $response->success('{{class}} deleted.')->setData('{{variable}}', ${{variable}});
    }

    // ============================================
    // REST API ENDPOINTS
    // ============================================

    /**
     * List all items (REST)
     *
     * @return \TypeRocket\Http\Response
     */
    public function indexRest(Response $response)
    {
        try {
            ${{plural_variable}} = {{class}}::new()->get();

            if (empty(${{plural_variable}})) {
                return $response
                    ->setData('{{plural_variable}}', [])
                    ->setMessage('No {{class}} found', 'info')
                    ->setStatus(200);
            }

            return $response
                ->setData('{{plural_variable}}', ${{plural_variable}})
                ->setMessage('{{class}} retrieved successfully', 'success')
                ->setStatus(200);
        } catch (\Exception $e) {
            error_log('{{class}} indexRest error: ' . $e->getMessage());

            return $response
                ->error('Failed to retrieve {{class}}: ' . $e->getMessage())
                ->setStatus(500);
        }
    }

    /**
     * Show single item (REST)
     *
     * @param {{class}} ${{variable}}
     * @param Response $response
     *
     * @return \TypeRocket\Http\Response
     */
    public function showRest({{class}} ${{variable}}, Response $response)
    {
        try {
            ${{variable}} = {{class}}::new()->find(${{variable}}->getID());

            if (empty(${{variable}})) {
                return $response
                    ->setData('{{variable}}', null)
                    ->setMessage('{{class}} not found', 'info')
                    ->setStatus(404);
            }

            return $response
                ->setData('{{variable}}', ${{variable}})
                ->setMessage('{{class}} retrieved successfully', 'success')
                ->setStatus(200);
        } catch (\Exception $e) {
            error_log('{{class}} showRest error: ' . $e->getMessage());
            return $response
                ->setMessage('An error occurred while retrieving {{class}}', 'error')
                ->setStatus(500);
        }
    }

    /**
     * Create item (REST)
     *
     * @param {{class}}Fields $fields
     * @param {{class}} ${{variable}}
     * @param Response $response
     * @param AuthUser $user
     *
     * @return \TypeRocket\Http\Response
     */
    public function createRest({{class}}Fields $fields, {{class}} ${{variable}}, Response $response, AuthUser $user)
    {
        try {
            if (!${{variable}}->can('create')) {
                return $response->unauthorized('Unauthorized: {{class}} not created');
            }

            ${{variable}}->created_by = $user->ID;
            ${{variable}}->updated_by = $user->ID;

            $saved = ${{variable}}->save($fields);

            if (!$saved) {
                return $response
                    ->error('Failed to create {{class}}')
                    ->setStatus(500);
            }

            return $response
                ->setData('{{variable}}', ${{variable}})
                ->setMessage('{{class}} created successfully', 'success')
                ->setStatus(201);
        } catch (\Exception $e) {
            error_log('{{class}} createRest error: ' . $e->getMessage());
            return $response
                ->error('Failed to create {{class}}: ' . $e->getMessage())
                ->setStatus(500);
        }
    }

    /**
     * Update item (REST)
     *
     * @param {{class}} ${{variable}}
     * @param {{class}}Fields $fields
     * @param Response $response
     * @param AuthUser $user
     *
     * @return \TypeRocket\Http\Response
     */
    public function updateRest({{class}} ${{variable}}, {{class}}Fields $fields, Response $response, AuthUser $user)
    {
        try {
            if (!${{variable}}->can('update')) {
                return $response->unauthorized('Unauthorized: {{class}} not updated');
            }

            ${{variable}}->updated_by = $user->ID;

            $saved = ${{variable}}->save($fields);

            if (!$saved) {
                return $response
                    ->error('Failed to update {{class}}')
                    ->setStatus(500);
            }

            return $response
                ->setData('{{variable}}', ${{variable}})
                ->setMessage('{{class}} updated successfully', 'success')
                ->setStatus(200);
        } catch (\Exception $e) {
            error_log('{{class}} updateRest error: ' . $e->getMessage());
            return $response
                ->error('Failed to update {{class}}: ' . $e->getMessage())
                ->setStatus(500);
        }
    }

    /**
     * Delete item (REST)
     *
     * @param {{class}} ${{variable}}
     * @param Response $response
     *
     * @return \TypeRocket\Http\Response
     */
    public function destroyRest({{class}} ${{variable}}, Response $response)
    {
        try {
            if (!${{variable}}->can('destroy')) {
                return $response->unauthorized('Unauthorized: {{class}} not deleted');
            }

            $deleted = ${{variable}}->delete();

            if ($deleted === false) {
                return $response
                    ->error('Delete failed due to a database error.')
                    ->setStatus(500);
            }

            return $response
                ->setMessage('{{class}} deleted successfully', 'success')
                ->setStatus(200);
        } catch (\Exception $e) {
            error_log('{{class}} destroyRest error: ' . $e->getMessage());
            return $response
                ->error('Failed to delete {{class}}: ' . $e->getMessage())
                ->setStatus(500);
        }
    }
}